Certainly, I've organized and improved the structure of your project's README file. Here's the revised README:

---

# Abacws Data Visualizer

**Note:** This project is currently under development.

This project is designed to create a Python virtual environment for accessing different APIs. It allows you to visualize IoT data for devices in the Abacws building at Cardiff University. The repository contains both the API and the Visualizer tool, both of which are deployed using [Docker](https://www.docker.com/).

You can find the production deployments of these tools at the following locations:
- [API](https://abacws.ggrainger.uk/api/)
- [Visualizer](https://abacws.ggrainger.uk/)

## Documentation

You can view the documentation for the two separate services in their respective README files:
- [API](./api/README.md)
- [Visualizer](./visualizer/README.md)

## Setup

To set up the project, follow these steps:

1. Create a Python virtual environment to access different APIs:

   ```bash
   python -m venv ./abacws-chatbot-venv
   ```

2. Activate the environment:

   For Windows:
   ```bash
   ./abacwsenvs/Scripts/activate
   ```

3. Upgrade pip:

   ```bash
   python.exe -m pip install --upgrade pip
   ```

4. Install dependencies:

   ```bash
   pip install -r requirements.txt
   python -m spacy download en_core_web_sm
   ```

## Docker Compose

We recommend using Docker Compose to deploy this project to your server, alongside [Traefik](https://traefik.io/traefik/). Here's an example of a Docker Compose file:

```yaml
version: '3.8'
services:
  mongo:
    image: mongo
    container_name: abacws-mongo
    restart: always
    volumes:
      - ./mongo:/data/db

  api:
    image: ghcr.io/randomman552/abacws-data-vis:api-latest
    container_name: abacws-api
    restart: always
    depends_on:
      - mongo

  visualiser:
    image: ghcr.io/randomman552/abacws-data-vis:visualiser-latest
    container_name: abacws-visualiser
    restart: always
    depends_on:
      - api
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.abacws-visualiser.loadbalancer.server.port=80"
      - "traefik.http.routers.abacws-visualiser.rule=Host(`visualiser.abacws.example.com`)"
      - "traefik.http.routers.abacws-visualiser.entrypoints=https"
      - "traefik.http.routers.abacws-visualiser.tls=true"
```

## Supported Tags

| Tag                 | Description                 |
|:-------------------:|:---------------------------:|
| `visualiser-latest` | Production-ready visualizer |
| `visualiser-main`   | Development visualizer      |
| `visualiser-vx.y.z` | Specific visualizer version |
| `api-latest`        | Production-ready API        |
| `api-main`          | Development API             |
| `api-vx.y.z`        | Specific API version        |

## ThingsBoard/tb-Postgres

ThingsBoard is an open-source IoT platform for data collection, processing, visualization, and device management.

Before starting the Docker container, run the following commands to create directories for storing data and logs and change their ownership to the Docker container user:

```bash
$ mkdir -p ~/.mytb-data && sudo chown -R 799:799 ~/.mytb-data
$ mkdir -p ~/.mytb-logs && sudo chown -R 799:799 ~/.mytb-logs
```

Execute the following command to run this Docker container:

```bash
$ docker run -it -p 9090:9090 -p 1883:1883 -p 7070:7070 -p 5683-5688:5683-5688/udp -v ~/.mytb-data:/data -v ~/.mytb-logs:/var/log/thingsboard --name mytb --restart always thingsboard/tb-postgres
```

After executing this command, you can open http://{your-host-ip}:9090 in your browser. You should see the ThingsBoard login page. Use the following default credentials:

- System Administrator: sysadmin@thingsboard.org / sysadmin
- Tenant Administrator: tenant@thingsboard.org / tenant
- Customer User: customer@thingsboard.org / customer

You can always change passwords for each account in the account profile page.

All APIs and services are available on the following ports:

- 8090: Abacws 3D Live visualization
- 8090/api/: Abacws 3D backend data API for performing queries
- 8080: IoT sensor data platform, Thingsboard GUI
- 8080/swagger-ui/: Thingsboard data query API for all devices and sensors
- 5050: PgAdmin GUI to connect to the Thingsboard PostgreSQL database
- 3030: Apache Jena Fusuki Server to host PDF data and perform queries
- 5005: Rasa Server Host
- 5055: Rasa Action Server Host
- 8082: Access Rasa Chatbot WEB UI to talk to the Abacws.

To access all APIs and services, attach all containers to the same network. You can create a network using the command:

```bash
docker network create <network_name>
```

For example, we have used a network called 'Network abacws-chatbot_my_bridge' in the Docker Compose file.

To run all containers, use the following command:

```bash
docker compose up -d
```

To inspect IP addresses assigned to your containers, run:

```bash
docker network inspect your_network_name
```

To extract the container IDs from the JSON output, run:

```bash
docker network inspect your_network_name | jq -r '.[0].Containers | keys[]'
```

For Windows, you can run:

```bash
FOR /f "tokens=*" %i IN ('docker ps -q') DO docker inspect -f "{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}" %i
```

To see container IDs, their names, and the network they are connected to, run:

```bash
docker ps --format "table {{.ID}}\t{{.Names}}\t{{.Networks}}"
```

## PostgreSQL and TimescaleDB

You can access PostgreSQL and TimescaleDB using the following instructions:

1. To log in to the Docker container as a root user to make changes, use:

   ```bash
   docker exec --user="root" -it <container_id> /bin/bash
   ```

2. To copy files from the container to the local repository to change configurations, use:

   ```bash
   docker cp <container_id>:<container_path> <local_path>
   ```

3. To install required packages to make changes, access the container as the root user and use package manager commands like `apt-get`:

   ```bash


   apt-get update
   apt-get install <package_name>
   ```

## PostgreSQL and TimescaleDB

You can access PostgreSQL and TimescaleDB as follows:

1. To log in to the PostgreSQL command line tool inside the Docker container, use:

   ```bash
   docker exec -it <container_name> psql -U postgres
   ```

2. To create a new database in PostgreSQL, use:

   ```sql
   CREATE DATABASE <database_name>;
   ```

3. To create an extension, use:

   ```sql
   CREATE EXTENSION IF NOT EXISTS timescaledb;
   ```

4. To list available extensions, use:

   ```sql
   \dx
   ```

## Contact Information

This project is maintained by Suhas Devmane as part of a PhD research project. For questions or inquiries, you can contact Suhas Devmane at [suhasdevmane@outlook.com](mailto:suhasdevmane@outlook.com).

---

Feel free to make any additional modifications or updates based on your specific project details and requirements.